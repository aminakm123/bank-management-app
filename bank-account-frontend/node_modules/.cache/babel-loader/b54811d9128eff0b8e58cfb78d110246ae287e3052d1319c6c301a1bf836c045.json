{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/Task - Code Sherpas Team/bank-account-frontend/src/components/AccountDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./AccountDashboard.css\"; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.baseURL = 'http://localhost:8000';\nconst AccountDashboard = () => {\n  _s();\n  const [accounts, setAccounts] = useState([]);\n  const [selectedAccount, setSelectedAccount] = useState(null);\n  const [amount, setAmount] = useState(\"\");\n  const [targetAccountNumber, setTargetAccountNumber] = useState(\"\");\n  const [actionType, setActionType] = useState(null);\n  useEffect(() => {\n    // Fetch all accounts when the component mounts\n    axios.get(\"/api/accounts/\").then(response => setAccounts(response.data)).catch(error => console.error(\"Error fetching accounts:\", error));\n  }, []);\n  const handleAction = action => {\n    setActionType(action);\n    if (action === \"deposit\" || action === \"withdraw\") {\n      setTargetAccountNumber(\"\"); // Clear the target account for deposit/withdraw actions\n    }\n  };\n  const performAction = () => {\n    if (!selectedAccount) {\n      alert(\"Please select an account.\");\n      return;\n    }\n    let url = \"\";\n    let data = {\n      amount: parseFloat(amount)\n    };\n    if (actionType === \"deposit\") {\n      url = `/api/accounts/${selectedAccount}/deposit/`;\n    } else if (actionType === \"withdraw\") {\n      url = `/api/accounts/${selectedAccount}/withdraw/`;\n    } else if (actionType === \"transfer\") {\n      url = `/api/accounts/${selectedAccount}/transfer/`;\n      data = {\n        ...data,\n        target_account_number: targetAccountNumber\n      };\n    }\n    axios.post(url, data).then(response => {\n      alert(response.data.status);\n      setAmount(\"\"); // Clear the amount input field\n      setTargetAccountNumber(\"\"); // Clear the target account input field\n      setActionType(null); // Reset action type\n      refreshAccounts(); // Refresh account list after the action\n    }).catch(error => console.error(`Error performing ${actionType}:`, error));\n  };\n  const refreshAccounts = () => {\n    // Fetch all accounts again to update balances after any transaction\n    axios.get(\"/api/accounts/\").then(response => setAccounts(response.data)).catch(error => console.error(\"Error refreshing accounts:\", error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"account-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select an Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: accounts.map(account => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => setSelectedAccount(account.account_number),\n          className: selectedAccount === account.account_number ? \"selected\" : \"\",\n          children: [\"Account: \", account.account_number, \" - Balance: \", account.balance]\n        }, account.account_number, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), selectedAccount && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Actions for Account \", selectedAccount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"action-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAction(\"deposit\"),\n          className: \"action-button\",\n          children: \"Deposit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAction(\"withdraw\"),\n          className: \"action-button\",\n          children: \"Withdraw\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAction(\"transfer\"),\n          className: \"action-button\",\n          children: \"Transfer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this), actionType && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: amount,\n          onChange: e => setAmount(e.target.value),\n          placeholder: \"Amount\",\n          className: \"input-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 29\n        }, this), actionType === \"transfer\" && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: targetAccountNumber,\n          onChange: e => setTargetAccountNumber(e.target.value),\n          placeholder: \"Target Account Number\",\n          className: \"input-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: performAction,\n          className: \"action-button\",\n          children: [\"Confirm \", actionType.charAt(0).toUpperCase() + actionType.slice(1)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n_s(AccountDashboard, \"lbxWxzf603PLke78YnAtU/QbZnU=\");\n_c = AccountDashboard;\nexport default AccountDashboard;\nvar _c;\n$RefreshReg$(_c, \"AccountDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","defaults","baseURL","AccountDashboard","_s","accounts","setAccounts","selectedAccount","setSelectedAccount","amount","setAmount","targetAccountNumber","setTargetAccountNumber","actionType","setActionType","get","then","response","data","catch","error","console","handleAction","action","performAction","alert","url","parseFloat","target_account_number","post","status","refreshAccounts","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","account","onClick","account_number","balance","type","value","onChange","e","target","placeholder","charAt","toUpperCase","slice","_c","$RefreshReg$"],"sources":["/home/user/Documents/Task - Code Sherpas Team/bank-account-frontend/src/components/AccountDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./AccountDashboard.css\"; // Import the CSS file\n\naxios.defaults.baseURL = 'http://localhost:8000';\n\nconst AccountDashboard = () => {\n    const [accounts, setAccounts] = useState([]);\n    const [selectedAccount, setSelectedAccount] = useState(null);\n    const [amount, setAmount] = useState(\"\");\n    const [targetAccountNumber, setTargetAccountNumber] = useState(\"\");\n    const [actionType, setActionType] = useState(null);\n\n    useEffect(() => {\n        // Fetch all accounts when the component mounts\n        axios\n            .get(\"/api/accounts/\")\n            .then((response) => setAccounts(response.data))\n            .catch((error) => console.error(\"Error fetching accounts:\", error));\n    }, []);\n\n    const handleAction = (action) => {\n        setActionType(action);\n        if (action === \"deposit\" || action === \"withdraw\") {\n            setTargetAccountNumber(\"\"); // Clear the target account for deposit/withdraw actions\n        }\n    };\n\n    const performAction = () => {\n        if (!selectedAccount) {\n            alert(\"Please select an account.\");\n            return;\n        }\n\n        let url = \"\";\n        let data = { amount: parseFloat(amount) };\n\n        if (actionType === \"deposit\") {\n            url = `/api/accounts/${selectedAccount}/deposit/`;\n        } else if (actionType === \"withdraw\") {\n            url = `/api/accounts/${selectedAccount}/withdraw/`;\n        } else if (actionType === \"transfer\") {\n            url = `/api/accounts/${selectedAccount}/transfer/`;\n            data = { ...data, target_account_number: targetAccountNumber };\n        }\n\n        axios\n            .post(url, data)\n            .then((response) => {\n                alert(response.data.status);\n                setAmount(\"\"); // Clear the amount input field\n                setTargetAccountNumber(\"\"); // Clear the target account input field\n                setActionType(null); // Reset action type\n                refreshAccounts(); // Refresh account list after the action\n            })\n            .catch((error) => console.error(`Error performing ${actionType}:`, error));\n    };\n\n    const refreshAccounts = () => {\n        // Fetch all accounts again to update balances after any transaction\n        axios\n            .get(\"/api/accounts/\")\n            .then((response) => setAccounts(response.data))\n            .catch((error) => console.error(\"Error refreshing accounts:\", error));\n    };\n\n    return (\n        <div className=\"dashboard-container\">\n            <div className=\"account-list\">\n                <h3>Select an Account</h3>\n                <ul>\n                    {accounts.map((account) => (\n                        <li\n                            key={account.account_number}\n                            onClick={() => setSelectedAccount(account.account_number)}\n                            className={selectedAccount === account.account_number ? \"selected\" : \"\"}\n                        >\n                            Account: {account.account_number} - Balance: {account.balance}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n\n            {selectedAccount && (\n                <div className=\"actions\">\n                    <h3>Actions for Account {selectedAccount}</h3>\n                    <div className=\"action-buttons\">\n                        <button onClick={() => handleAction(\"deposit\")} className=\"action-button\">\n                            Deposit\n                        </button>\n                        <button onClick={() => handleAction(\"withdraw\")} className=\"action-button\">\n                            Withdraw\n                        </button>\n                        <button onClick={() => handleAction(\"transfer\")} className=\"action-button\">\n                            Transfer\n                        </button>\n                    </div>\n\n                    {actionType && (\n                        <div className=\"form-group\">\n                            <input\n                                type=\"number\"\n                                value={amount}\n                                onChange={(e) => setAmount(e.target.value)}\n                                placeholder=\"Amount\"\n                                className=\"input-field\"\n                            />\n                            {actionType === \"transfer\" && (\n                                <input\n                                    type=\"text\"\n                                    value={targetAccountNumber}\n                                    onChange={(e) => setTargetAccountNumber(e.target.value)}\n                                    placeholder=\"Target Account Number\"\n                                    className=\"input-field\"\n                                />\n                            )}\n                            <button onClick={performAction} className=\"action-button\">\n                                Confirm {actionType.charAt(0).toUpperCase() + actionType.slice(1)}\n                            </button>\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default AccountDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}